class DisjointSet:
    def __init__(self,n):
        self.set_id = [i for i in range(n)]
        self.set_size = [1 for _ in range(n)]
        self.count = n
    def find(self,p):
        while p !=self.set_id[p]:
            self.set_id[p] = self.set_id[self.set_id[p]]
            p = self.set_id[p]
        return p
    def union(self,p,q):
        i = self.find(p)
        j = self.find(q)
        if i == j:
            return
        if self.set_size[i] < self.set_size[j]:
            self.set_id[i] = j
            self.set_size[j] += self.set_size[i]
        else:
            self.set_id[j] = i
            self.set_size[i] += self.set_size[j]
        self.count -= 1
class Solution:
    def findCircleNum(self, M):
        """
        :type M: List[List[int]]
        :rtype: int
        """
        disjoint_set = DisjointSet(len(M))
        for i in range(len(M)):
            for j in range(len(M)):
                if M[i][j] == 1 :
                    disjoint_set.union(i,j)
        return disjoint_set.count



def findCircleNum1(self, M):
    """
    算法：DFS
    思路：
        可以将题目转换为是在一个图中求连通子图的问题，给出的N*N的矩阵就是邻接矩阵，建立N个节点的visited数组，
        从not visited的节点开始深度优先遍历，遍历就是在邻接矩阵中去遍历，如果在第i个节点的邻接矩阵那一行中的第j
        个位置处M[i][j]==1 and not visited[j]，就应该dfs到这个第j个节点的位置，
    复杂度分析：
        时间：ON2?遍历所有节点
        空间：ON，visited数组
    """
    if M == [] or M[0] == []:
        return 0
    n = len(M)
    visited = [False] * n
 
    def dfs(i):
        visited[i] = True
        for j in range(n):
            if M[i][j] == 1 and not visited[j]:
                dfs(j)
 
    counter = 0
    for i in range(n):
        if not visited[i]:
            dfs(i)
            counter += 1
    return counter
 
def findCircleNum2( M):
    """
    和上面相近，这里用BFS去遍历
    """
    if M == [] or M[0] == []:
        return 0
    n = len(M)
    visited = [False] * n
 
    counter = 0
    for i in range(n):
        if not visited[i]:
            queue = [i]
            while queue:
                index = queue.pop(0)
                visited[index] = True
                for j in range(n):
                    if M[index][j] == 1 and not visited[j]:
                        queue.append(j)
            counter += 1
    return counter
--------------------- 
作者：咚咚咚Boom 
来源：CSDN 
原文：https://blog.csdn.net/qq_28327765/article/details/85201305 
版权声明：本文为博主原创文章，转载请附上博文链接！
