# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def IsBalanced_Solution(self, pRoot):
        # write code here
        return self.dfs(pRoot) != -1
    def dfs(self, p):        # 求树的高度，并同时判断是不是平衡二叉树。
        if p == None:
            return 0
        left = self.dfs(p.left) 
        # 先判断左子树是不是，如果左子树是平衡树，继续检查右子树，如果不是平衡树，直接返回-1层层跳出递归直到他的根节点
        if left == -1:
            return -1
        right = self.dfs(p.right)
        if right == -1:
            return -1
        if abs(left - right) > 1:  # 执行到这一步，说明左右子树都是平衡二叉树，在判断在整体是不是二叉树，不是返回-1
            return -1
        return max(left, right) + 1  # 如果子树是平衡二叉树，则返回子树的高度
        
        
# -*- coding:utf-8 -*-
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def dfs(self,pRoot):
        if pRoot == None:
            return 0
        if pRoot.left == None and pRoot.right == None:
            return 1
        lefth = self.dfs(pRoot.left)
        righth = self.dfs(pRoot.right)
        return max(righth,lefth)+1
    def IsBalanced_Solution(self, pRoot):
        # write code here
        if pRoot == None:
            return True
        return abs(self.dfs(pRoot.left)-self.dfs(pRoot.right))<=1 and self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)

