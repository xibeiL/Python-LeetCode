# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None



class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        li = []
        self.middlesearch(root,li)
        s = li.index(L)
        e = li.index(R)
        add = 0
        for i in range(s,e+1):
            add += li[i]
        return add
    def middlesearch(self,root,li):
        if root == None:
            return 0
        self.middlesearch(root.left,li)
        li.append(root.val)
        self.middlesearch(root.right,li)
        return li
        
        
        
        
        
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
# class Solution:
#     def rangeSumBST(self, root, L, R):
#         res = [0]
#         self.dfs(root, L, R, res)
#         return res[0]
#     def dfs(self, root, L, R, res):
#         if not root:
#             return
#         if L <= root.val <= R:
#             res[0] += root.val
#         if root.val < R:
#             self.dfs(root.right, L, R, res)
#         if root.val > L:
#             self.dfs(root.left, L, R, res)
# 
# 
# 
# s = Solution()
# Tree = TreeNode(10)
# Tree.left = TreeNode(5)
# Tree.right = TreeNode(15)
# Tree.left.left = TreeNode(3)
# Tree.left.right = TreeNode(7)
# Tree.right.right = TreeNode(18)
# print(s.rangeSumBST(Tree,7,15))
