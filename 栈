#栈的特点：后进先出 LIFO
#栈的操作：创建一个新的空栈 stack()
#         元素入栈（至栈顶） push()
#         弹出栈顶元素 pop()
#         返回栈顶元素 peek()
#         判断栈是否为空 is_empty
#         返回栈的元素个数 size()
class Stack(object):
    def __init__(self):
        self.__stack = []
    def push(self,item):
        self.__stack.append(item)
    def pop(self):
        return self.__stack.pop()
    def peek(self):
        if self.__stack:
            return self.__stack[-1]
        else:
            return None
    def is_empty(self):
        return len(self.__stack) == 0
    def size(self):
        return len(self.__stack)


if __name__ == '__main__':
    ll = Stack()
    print(ll.is_empty())
    print(ll.size())
    # print(ll.peek())
    ll.push(1)
    ll.push(2)
    ll.push(3)
    ll.push(4)
    print(ll.peek())
    print(ll.is_empty())
    print(ll.size())
    ll.peek()
    print(ll.pop())
    print(ll.peek())
